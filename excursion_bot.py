import os
import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

def load_route_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ route.json"""
    try:
        with open('route.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.error("–§–∞–π–ª route.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ route.json!")
        return None

def get_location_text(location_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ .txt —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        location_path = os.path.join('data', location_name)
        if not os.path.exists(location_path):
            logger.error(f"–ü–∞–ø–∫–∞ {location_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return None
        
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π .txt —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ
        for file in os.listdir(location_path):
            if file.endswith('.txt'):
                file_path = os.path.join(location_path, file)
                with open(file_path, 'r', encoding='utf-8') as f:
                    return f.read()
        
        logger.error(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {location_path}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        return None

def get_location_images(location_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        location_path = os.path.join('data', location_name)
        if not os.path.exists(location_path):
            logger.error(f"–ü–∞–ø–∫–∞ {location_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return []
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']
        images = []
        
        for file in os.listdir(location_path):
            file_lower = file.lower()
            if any(file_lower.endswith(ext) for ext in image_extensions):
                file_path = os.path.join(location_path, file)
                images.append(file_path)
        
        return sorted(images)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏: {e}")
        return []

def get_location_audio(location_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        location_path = os.path.join('data', location_name)
        if not os.path.exists(location_path):
            logger.error(f"–ü–∞–ø–∫–∞ {location_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return None
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ
        audio_extensions = ['.mp3', '.wav', '.ogg', '.m4a', '.aac', '.flac']
        
        for file in os.listdir(location_path):
            file_lower = file.lower()
            if any(file_lower.endswith(ext) for ext in audio_extensions):
                file_path = os.path.join(location_path, file)
                return file_path
        
        return None  # –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        return None

def get_navigation_stack(context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    if 'navigation_stack' not in context.user_data:
        context.user_data['navigation_stack'] = []
    return context.user_data['navigation_stack']

def push_to_navigation_stack(context: ContextTypes.DEFAULT_TYPE, location_name: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é –≤ —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    stack = get_navigation_stack(context)
    if not stack or stack[-1] != location_name:  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        stack.append(location_name)

def pop_from_navigation_stack(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –ª–æ–∫–∞—Ü–∏—é –∏–∑ —Å—Ç–µ–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é"""
    stack = get_navigation_stack(context)
    if len(stack) > 1:
        stack.pop()  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é
        return stack[-1] if stack else None
    return None

def get_message_history(context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    if 'message_history' not in context.user_data:
        context.user_data['message_history'] = []
    return context.user_data['message_history']

def add_to_message_history(context: ContextTypes.DEFAULT_TYPE, message_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    history = get_message_history(context)
    history.append(message_id)

def clear_message_history(context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    context.user_data['message_history'] = []

async def delete_previous_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
    history = get_message_history(context)
    for message_id in history:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
    clear_message_history(context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    user = update.effective_user
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
    clear_message_history(context)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = [[InlineKeyboardButton("–ù–∞—á–Ω—ë–º! üöÄ", callback_data='start_excursion')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    start_message = await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç! üó∫Ô∏è\n"
        f"–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏ –∏ —Ç—É—Ä–∏–∑–º–æ–º.\n\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é!",
        reply_markup=reply_markup,
        disable_notification=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_to_message_history(context, start_message.message_id)

async def show_location(update: Update, context: ContextTypes.DEFAULT_TYPE, location_name: str, is_back_navigation: bool = False) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ª–æ–∫–∞—Ü–∏–∏
    location_text = get_location_text(location_name)
    if not location_text:
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
    route_data = load_route_data()
    if not route_data:
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if not is_back_navigation:
        push_to_navigation_stack(context, location_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
    available_locations = route_data.get(location_name, [])
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    if available_locations:
        for loc in available_locations:
            keyboard.append([InlineKeyboardButton(f"üìç {loc}", callback_data=f'location_{loc}')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è –≤ —Å—Ç–µ–∫–µ
    stack = get_navigation_stack(context)
    if len(stack) > 1:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_navigation')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è
    end_location = route_data.get('end')
    if location_name == end_location:
        keyboard.append([InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='start_excursion')])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ –ª–æ–∫–∞—Ü–∏–∏
    images = get_location_images(location_name)
    audio_file = get_location_audio(location_name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
    message = f"üéØ **{location_name}**\n\n{location_text}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    old_message_history = get_message_history(context).copy()
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    clear_message_history(context)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if images:
            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            media_group = []
            for image_path in images:
                with open(image_path, 'rb') as photo:
                    media_group.append(InputMediaPhoto(media=photo))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π
            sent_messages = await context.bot.send_media_group(
                chat_id=update.effective_chat.id,
                media=media_group,
                disable_notification=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é
            for sent_message in sent_messages:
                add_to_message_history(context, sent_message.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        text_message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message,
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_notification=True
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_to_message_history(context, text_message.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if audio_file:
            with open(audio_file, 'rb') as audio:
                audio_message = await context.bot.send_audio(
                    chat_id=update.effective_chat.id,
                    audio=audio,
                    disable_notification=True
                )
                add_to_message_history(context, audio_message.message_id)
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for message_id in old_message_history:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        text_message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message,
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_notification=True
        )
        add_to_message_history(context, text_message.message_id)
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        for message_id in old_message_history:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == 'start_excursion':
        # –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏
        context.user_data['navigation_stack'] = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
        route_data = load_route_data()
        if not route_data:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
        start_location = route_data.get('start')
        if not start_location:
            await query.edit_message_text("‚ùå –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é (show_location —Å–∞–º–∞ —É–¥–∞–ª–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        await show_location(update, context, start_location)
    
    elif query.data.startswith('location_'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ callback_data
        location_name = query.data.replace('location_', '')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
        await show_location(update, context, location_name)
    
    elif query.data == 'back_navigation':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏
        previous_location = pop_from_navigation_stack(context)
        if previous_location:
            await show_location(update, context, previous_location, is_back_navigation=True)
        else:
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ª–æ–∫–∞—Ü–∏–∏!")

async def show_all_locations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
    route_data = load_route_data()
    if not route_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º 'start' –∏ 'end', –Ω–æ –≤–∫–ª—é—á–∞–µ–º –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è)
    all_locations = []
    for key in route_data.keys():
        if key not in ['start', 'end']:
            all_locations.append(key)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º
    start_location = route_data.get('start')
    end_location = route_data.get('end')
    
    if start_location and start_location not in all_locations:
        all_locations.append(start_location)
    if end_location and end_location not in all_locations:
        all_locations.append(end_location)
    
    if not all_locations:
        await update.message.reply_text("‚ùå –õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π
    keyboard = []
    for location in all_locations:
        keyboard.append([InlineKeyboardButton(f"üìç {location}", callback_data=f'location_{location}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "üó∫Ô∏è **–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞:**\n\n"
    for i, location in enumerate(all_locations, 1):
        message_text += f"{i}. {location}\n"
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    clear_message_history(context)
    
    location_message = await update.message.reply_text(
        message_text,
        parse_mode='Markdown',
        reply_markup=reply_markup,
        disable_notification=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_to_message_history(context, location_message.message_id)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/show_all_locations - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ù–∞—á–Ω—ë–º!" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é! üöÄ
    """
    await update.message.reply_text(help_text, disable_notification=True)

async def post_init(application: Application) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    commands = [
        ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        ("show_all_locations", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏"),
        ("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    ]
    await application.bot.set_my_commands(commands)
    logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("show_all_locations", show_all_locations))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
