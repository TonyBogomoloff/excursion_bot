import os
import json
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageReactionHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

def log_user_action(user_id: int, action: str, details: str = ""):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É users –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        users_dir = 'users'
        if not os.path.exists(users_dir):
            os.makedirs(users_dir)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dir = os.path.join(users_dir, str(user_id))
        if not os.path.exists(user_dir):
            os.makedirs(user_dir)
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
        log_file = os.path.join(user_dir, 'actions.log')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∞
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] {action}"
        if details:
            log_entry += f" - {details}"
        log_entry += "\n"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def handle_reaction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        user = update.effective_user
        message_reaction = update.message_reaction
        
        if not user or not message_reaction:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∞–∫—Ü–∏–∏
        reactions = message_reaction.new_reaction
        old_reactions = message_reaction.old_reaction
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
        if reactions:
            for reaction in reactions:
                emoji = reaction.emoji if hasattr(reaction, 'emoji') else str(reaction)
                log_user_action(
                    user.id, 
                    "–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è", 
                    f"–≠–º–æ–¥–∑–∏: {emoji}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message_reaction.message_id}"
                )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
        if old_reactions:
            for reaction in old_reactions:
                emoji = reaction.emoji if hasattr(reaction, 'emoji') else str(reaction)
                log_user_action(
                    user.id, 
                    "–£–¥–∞–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è", 
                    f"–≠–º–æ–¥–∑–∏: {emoji}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message_reaction.message_id}"
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {e}")

def get_locations_from_data():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏ data –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
    try:
        data_path = 'data'
        if not os.path.exists(data_path):
            logger.error("–ü–∞–ø–∫–∞ data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –≤ data –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
        locations = []
        for item in os.listdir(data_path):
            item_path = os.path.join(data_path, item)
            if os.path.isdir(item_path):
                locations.append(item)
        
        return sorted(locations)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏ data: {e}")
        return []

def get_location_text(location_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ .txt —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        location_path = os.path.join('data', location_name)
        if not os.path.exists(location_path):
            logger.error(f"–ü–∞–ø–∫–∞ {location_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return None
        
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π .txt —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ
        for file in os.listdir(location_path):
            if file.endswith('.txt'):
                file_path = os.path.join(location_path, file)
                with open(file_path, 'r', encoding='utf-8') as f:
                    return f.read()
        
        logger.error(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ {location_path}")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        return None

def get_location_images(location_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        location_path = os.path.join('data', location_name)
        if not os.path.exists(location_path):
            logger.error(f"–ü–∞–ø–∫–∞ {location_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return []
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']
        images = []
        
        for file in os.listdir(location_path):
            file_lower = file.lower()
            if any(file_lower.endswith(ext) for ext in image_extensions):
                file_path = os.path.join(location_path, file)
                images.append(file_path)
        
        return sorted(images)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ª–æ–∫–∞—Ü–∏–∏: {e}")
        return []

def get_location_audio(location_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–∑ –ø–∞–ø–∫–∏ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        location_path = os.path.join('data', location_name)
        if not os.path.exists(location_path):
            logger.error(f"–ü–∞–ø–∫–∞ {location_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return None
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ
        audio_extensions = ['.mp3', '.wav', '.ogg', '.m4a', '.aac', '.flac']
        
        for file in os.listdir(location_path):
            file_lower = file.lower()
            if any(file_lower.endswith(ext) for ext in audio_extensions):
                file_path = os.path.join(location_path, file)
                return file_path
        
        return None  # –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        return None



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user.id, "–ö–æ–º–∞–Ω–¥–∞ /start", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
    keyboard = [[InlineKeyboardButton("–ù–∞—á–Ω—ë–º! üöÄ", callback_data='start_excursion')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç! üó∫Ô∏è\n"
        f"–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏ –∏ —Ç—É—Ä–∏–∑–º–æ–º.\n\n"
        f"–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é!",
        reply_markup=reply_markup,
        disable_notification=True
    )

async def show_location(update: Update, context: ContextTypes.DEFAULT_TYPE, location_name: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ª–æ–∫–∞—Ü–∏–∏
    location_text = get_location_text(location_name)
    if not location_text:
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–∫–∞—Ü–∏–∏!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π
    all_locations = get_locations_from_data()
    if not all_locations:
        await update.callback_query.edit_message_text("‚ùå –õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –ª–æ–∫–∞—Ü–∏–π
    current_index = all_locations.index(location_name) if location_name in all_locations else -1
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è –ª–æ–∫–∞—Ü–∏—è" –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è
    if current_index < len(all_locations) - 1:
        next_location = all_locations[current_index + 1]
        keyboard.append([InlineKeyboardButton(f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è: {next_location}", callback_data=f'location_{next_location}')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–æ–∫–∞—Ü–∏—è
    if current_index == len(all_locations) - 1:
        keyboard.append([InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data='start_excursion')])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∞—É–¥–∏–æ –ª–æ–∫–∞—Ü–∏–∏
    images = get_location_images(location_name)
    audio_file = get_location_audio(location_name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏
    message = f"üéØ **{location_name}**\n\n{location_text}"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if images:
            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            media_group = []
            for image_path in images:
                with open(image_path, 'rb') as photo:
                    media_group.append(InputMediaPhoto(media=photo))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π
            await context.bot.send_media_group(
                chat_id=update.effective_chat.id,
                media=media_group,
                disable_notification=True
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message,
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_notification=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        if audio_file:
            with open(audio_file, 'rb') as audio:
                await context.bot.send_audio(
                    chat_id=update.effective_chat.id,
                    audio=audio,
                    disable_notification=True
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message,
            parse_mode='Markdown',
            reply_markup=reply_markup,
            disable_notification=True
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user = update.effective_user
    await query.answer()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    log_user_action(user.id, "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞", f"–ö–Ω–æ–ø–∫–∞: {query.data}")
    
    if query.data == 'start_excursion':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π
        all_locations = get_locations_from_data()
        if not all_locations:
            await query.edit_message_text("‚ùå –õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –ª–æ–∫–∞—Ü–∏—é (—Å—Ç–∞—Ä—Ç–æ–≤—É—é)
        start_location = all_locations[0]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é (show_location —Å–∞–º–∞ —É–¥–∞–ª–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        await show_location(update, context, start_location)
    
    elif query.data.startswith('location_'):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ callback_data
        location_name = query.data.replace('location_', '')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
        await show_location(update, context, location_name)
    

async def show_all_locations(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞"""
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user.id, "–ö–æ–º–∞–Ω–¥–∞ /show_all_locations")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π –∏–∑ –ø–∞–ø–∫–∏ data
    all_locations = get_locations_from_data()
    if not all_locations:
        await update.message.reply_text("‚ùå –õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π
    keyboard = []
    for location in all_locations:
        keyboard.append([InlineKeyboardButton(f"üìç {location}", callback_data=f'location_{location}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message_text = "üó∫Ô∏è **–í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞:**\n\n"
    for i, location in enumerate(all_locations, 1):
        message_text += f"{i}. {location}\n"
    
    await update.message.reply_text(
        message_text,
        parse_mode='Markdown',
        reply_markup=reply_markup,
        disable_notification=True
    )

async def map_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user.id, "–ö–æ–º–∞–Ω–¥–∞ /map")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã
        map_path = 'map.jpg'
        if not os.path.exists(map_path):
            await update.message.reply_text("‚ùå –ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", disable_notification=True)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        with open(map_path, 'rb') as photo:
            await update.message.reply_photo(
                photo=photo,
                caption="üó∫Ô∏è **–ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞**\n\n–í–æ—Ç –æ–±—â–∞—è –∫–∞—Ä—Ç–∞ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π —ç–∫—Å–∫—É—Ä—Å–∏–∏!",
                parse_mode='Markdown',
                disable_notification=True
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã!", disable_notification=True)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    user = update.effective_user
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user.id, "–ö–æ–º–∞–Ω–¥–∞ /help")
    
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/show_all_locations - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
/map - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –º–∞—Ä—à—Ä—É—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    """
    await update.message.reply_text(help_text, disable_notification=True)

async def post_init(application: Application) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    commands = [
        ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        ("show_all_locations", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏"),
        ("map", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –º–∞—Ä—à—Ä—É—Ç–∞"),
        ("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    ]
    await application.bot.set_my_commands(commands)
    logger.info("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª .env")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("show_all_locations", show_all_locations))
    application.add_handler(CommandHandler("map", map_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π
    application.add_handler(MessageReactionHandler(handle_reaction))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
